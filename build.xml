<?xml version="1.0"?>

<!--
  Build file for the Central Authentication Service (CAS) Server.

  This script requires a "lib" directory containing the necessary third party JAR files.
  See project.properties for the definitions of the properties used in this file.

  $Id$
-->

<project name="cas-server" default="usage" basedir=".">

	<!-- Set properties needed for build -->
	<property file="project.properties"/>

	<!-- Set build classpath -->
	<path id="all-libs">

		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="core/src/test/resources">
			<include name="**/*.txt" />
			<include name="*.xml" />
		</fileset>
	</path>

	<!-- Usage message -->
	<target name="usage">

		<echo message=""/>
		<echo message="${name} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="build  --> build all; don't create WAR"/>
		<echo message="tests   --> run tests"/>
		<echo message="war    --> create WAR suitable for deployment"/>
		<echo message="docs   --> create all docs"/>
		<echo message="release--> create distribution package"/>
		<echo message=""/>

	</target>


	<target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc.)">

		<delete dir="${dist.dir}"/>
		<delete dir="${javadocs.dir}"/>

		<delete dir="${target.classes.dir}"/>
		<delete dir="${target.testclasses.dir}"/>
		<delete dir="${target.junit.reports.dir}"/>
		<delete dir="${target.junit.summary.dir}"/>
		<delete dir="${target.release.dir}"/>

		<!-- just kill target dir (it's safer). No need at this point to keep it -->
		<delete dir="${target.dir}"/>

	</target>


	<!-- Compile the main source tree.	-->
	<target name="build" depends="clean" description="Compile main source tree java files into class files">

		<mkdir dir="${target.classes.dir}"/>
		<mkdir dir="${target.classes.dir}/META-INF"/>

		<!-- TODO: default java options? -->
		<javac destdir="${target.classes.dir}" source="1.4" target="1.4" debug="${debug}"
				deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<classpath refid="all-libs"/>
		</javac>

	</target>


	<target name="initdist" description="Initialize the distribution directory">

		<mkdir dir="${dist.dir}"/>

	</target>


	<target name="jar" depends="tests" description="Create CAS Server JAR">

		<delete file="${target.dir}/${cas-name}.jar"/>

		<jar jarfile="${target.dir}/${cas-name}.jar" basedir="${target.classes.dir}">
			<manifest>
				<attribute name="Implementation-Title" value="${cas-title}"/>
				<attribute name="Implementation-Version" value="${cas-version}"/>
				<attribute name="CAS-Server-Version" value="${cas-version}"/>
			</manifest>
		</jar>

	</target>

	<target name="war" depends="jar, initdist">

		<war warfile="${dist.dir}/cas.war" webxml="${web.dir}/WEB-INF/web.xml">

		<!-- TODO: why wouldn't we? -->
		<!-- TO USE WAR MANIFEST manifest="${web-war.dir}/WEB-INF/manifest"> -->

			<fileset dir="${web.dir}" excludes="WEB-INF/**"/>
			
			<webinf dir="${web.dir}/WEB-INF">
				<!-- These web.xml and manifest are added automatically -->
				<exclude name="web.xml"/>
				<exclude name="manifest"/>
			</webinf>

			<lib dir="${lib.dir}"/>
			<lib dir="${target.dir}" includes="cas-server.jar" />
		</war>
	</target>




	<target name="srczip" depends="initdist" description="Create source ZIP (containing all Java sources)">

		<delete file="${dist.dir}/cas-server-src.zip"/>

		<zip zipfile="${dist.dir}/${cas-name}-${cas-version}-src.zip" basepath="${src.dir}"/>

	</target>

	<target name="javadoc" description="Generate Javadocs">

		<mkdir dir="${javadocs.dir}"/>

		<!-- TODO source defaults...need 1.4 ? -->
		<javadoc sourcepath="${src.dir}" destdir="${javadocs.dir}" windowtitle="Central Authentication Service"
				source="1.4" author="true" version="true" use="true" defaultexcludes="true">
			<doctitle><![CDATA[<h1>Central Authentication Service (CAS)</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright (C) 2005 Yale, Rutgers.</i>]]></bottom>
			<classpath refid="all-libs"/>
			<packageset dir="${src.dir}"/>
		</javadoc>

	</target>

	<target name="release" depends="javadoc" description="Generate release zip file">

		<delete file="${dist.dir}/${release.zip}"/>
		<delete file="${dist.dir}/${release.gzip}"/>

		<fileset id="release" dir=".">
			<include name="target/*.war"/>
			<include name="docs/**"/>
			<include name="core/src/main/java/**"/>
			<include name="core/src/test/java/**"/>
			<include name="*.txt"/>
			<include name="*.properties"/>
			<include name="*.xml"/>
			<include name="*.bat"/>
			<include name="${web.dir}/**" />
		</fileset>

		<zip zipfile="${dist.dir}/${release.zip}">
			<zipfileset refid="release" prefix="${release.path}"/>
		</zip>
		
		<tar destfile="${dist.dir}/${release.tar}">
			<tarfileset dir=".">
				<include name="target/*.war"/>
				<include name="docs/**"/>
				<include name="core/src/main/java/**"/>
				<include name="core/src/test/java/**"/>
				<include name="*.txt"/>
				<include name="*.properties"/>
				<include name="*.bat"/>
				<include name="${web.dir}/**" />
			</tarfileset>		
		</tar>
	
		<gzip
			src="${dist.dir}/${release.tar}"
			zipfile="${dist.dir}/${release.gzip}">
		</gzip>
		
		<delete file="${dist.dir}/${release.tar}"/>
		<delete file="${dist.dir}/cas.war"/>

	</target>

	<target name="buildtests" depends="build" description="Compile test source tree java files into class files">

		<mkdir dir="${target.testclasses.dir}"/>

		<!-- TODO source options? -->
		<javac destdir="${target.testclasses.dir}" source="1.4" target="1.4" debug="${debug}"
				deprecation="false" optimize="false" failonerror="true">
			<src path="${test.dir}"/>
			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>
		</javac>

		<!-- Pick up logging config from test directory -->
		<copy todir="${target.testclasses.dir}" preservelastmodified="true">
			<fileset dir="${test.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>

	</target>


	<!--
		Run test suite. This target takes its includes and excludes from
		project.properties. However it's possible to run specific tests by passing in
		the test.includes and (optionally) test.excludes properties through the
		command line, as below:
			ant tests -Dtest.includes=org/springframework/jdbc/**/*Test*
	-->
	<target name="tests" depends="buildtests" description="Run tests">

		<property name="reports.dir" value="${target.junit.reports.dir}"/>

		<mkdir dir="${reports.dir}"/>

		<junit printsummary="yes" haltonfailure="yes" haltonerror="yes">

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${lib.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain"/>

			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${target.testclasses.dir}"
							includes="${test.includes}"
							excludes="${test.excludes}" />
			</batchtest>
		</junit>
	</target>

</project>